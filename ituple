/*
 * Iterable tuple
 * Copyright (C) 2017  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_ITUPLE
#define NON_STD_ITUPLE

#include <tuple>

namespace non_std
{

template <typename...>
struct _AllEq;

template <typename _FirstArg, typename... _OtherArgs>
struct _AllEq<_FirstArg,_OtherArgs...> {
    bool operator() ( _FirstArg&& __first, _OtherArgs&&... __args ) {
        for ( bool ne: { (__first != __args)... } )
            if ( ne ) return false;
        return true;
    }
};

template <typename _OnlyOneArg>
struct _AllEq<_OnlyOneArg> {
    bool operator() ( _OnlyOneArg&& ) { return true; }
};

template <>
struct _AllEq<> {
    bool operator() () { return true; }
};

template <typename... _Args>
bool all_eq ( _Args... __args ) { return all_eq<_Args...> ( __args... ); }

template <template <typename...> class, typename...>
struct _ITupleHelper;

template <template <typename...> class _Tp>
struct _ITupleHelper<_Tp> {
    template <bool...>
    struct _IteratorHelper {
        template <typename... _Args>
        struct _Iterator {
            using type = _Tp<_Args...>;
        };
    };
};

template <template <typename...> class _Tp, typename _Type>
struct _ITupleHelper<_Tp,_Type> {
    template <bool _Const>
    struct _IteratorHelper {
        template <typename... _Args>
        struct _Iterator {
            using _FirstT = typename std::remove_reference<_Type>::type;
            using type = _Tp<_Args..., typename std::conditional<_Const || std::is_const<_FirstT>{},
                         typename _FirstT::const_iterator, typename _FirstT::iterator>::type>;
        };
    };
};

template <template <typename...> class _Tp, typename _FirstType, typename... _OtherTypes>
struct _ITupleHelper<_Tp,_FirstType,_OtherTypes...> {
    template <bool _FirstConst, bool... _OtherConst>
    struct _IteratorHelper {
        template <typename... _Args>
        struct _Iterator {
            using _FirstT = typename std::remove_reference<_FirstType>::type;
            using type = typename _ITupleHelper<_Tp, _OtherTypes...>::template _IteratorHelper<_OtherConst...>
                       ::template _Iterator<_Args..., typename std::conditional<_FirstConst || std::is_const<_FirstT>{},
                         typename _FirstT::const_iterator, typename _FirstT::iterator>::type>::type;
        };
    };
};

template <typename...>
struct _TupleToRange;

template <>
struct _TupleToRange<> {
    static constexpr std::size_t _MaxIndex = -1;
    template <template <std::size_t...> class _Tp>
    using pass = _Tp<>;
};

template <typename _FirstType, typename... _OtherTypes>
struct _TupleToRange<_FirstType,_OtherTypes...> {
    static constexpr std::size_t _MaxIndex = _TupleToRange<_OtherTypes...>::_MaxIndex + 1;
    template <template <std::size_t...> class _Tp>
    struct _PassHelper {
        template <std::size_t... __a>
        using _T = _Tp<__a..., _MaxIndex>;
        using type = typename _TupleToRange<_OtherTypes...>::template pass<_T>;
    };
    template <template <std::size_t...> class _Tp>
    using pass = typename _PassHelper<_Tp>::type;
};

template <std::size_t... _Values>
struct _PassHelperFunc {
    template <typename _Callable, typename _Tuple>
    static auto pass ( _Callable&& __callable, _Tuple&& __tuple )
   -> decltype(__callable(std::get<_Values>(std::forward<_Tuple>(__tuple))...)) { // GCC 4.8.2 needs this
        return __callable(std::get<_Values>(std::forward<_Tuple>(__tuple))...);
    }
};
template <typename... _Types>
using _PassHelperWrapper = typename _TupleToRange<_Types...>::template pass<_PassHelperFunc>;

namespace _ITupleIteratorLambdas {
    template <template <typename...> class _Tp>
    struct __func0 {
        template <typename... _Args>
        auto operator() ( _Args... __args ) -> _Tp<decltype(*__args)...> { return _Tp<decltype(*__args)...>{*__args...}; }
    };
    struct __func1 {
        template <typename... _Args>
        void operator() ( _Args&... __args ) { for ( std::nullptr_t i: { (++__args, nullptr)... } ) (void)i; }
    };
    struct __func2 {
        template <typename... _Args>
        void operator() ( _Args&... __args ) { for ( std::nullptr_t i: { (__args++, nullptr)... } ) (void)i; }
    };
    struct __func3 {
        template <typename... _Args>
        void operator() ( _Args&... __args ) { for ( std::nullptr_t i: { (--__args, nullptr)... } ) (void)i; }
    };
    struct __func4 {
        template <typename... _Args>
        void operator() ( _Args&... __args ) { for ( std::nullptr_t i: { (__args--, nullptr)... } ) (void)i; }
    };
}
template <typename _IterType, template <typename...> class _Tp, typename... _Types>
struct _ITupleIterator : _IterType {
    using _IterType::_IterType;
    template <typename _Callable>
    auto pass ( _Callable&& __callable ) {
        return _PassHelperWrapper<_Types...>::pass(std::forward<_Callable>(__callable), *this);
    }
    auto operator* () {
        return pass ( _ITupleIteratorLambdas::__func0<_Tp>{} );
    }
    _ITupleIterator& operator++ () {
        pass ( _ITupleIteratorLambdas::__func1{} );
        return *this;
    }
    _ITupleIterator operator++ (int) {
        _ITupleIterator ret = *this;
        pass ( _ITupleIteratorLambdas::__func2{} );
        return ret;
    }
    _ITupleIterator& operator-- () {
        pass ( _ITupleIteratorLambdas::__func3{} );
        return *this;
    }
    _ITupleIterator operator-- (int) {
        _ITupleIterator ret = *this;
        pass ( _ITupleIteratorLambdas::__func4{} );
        return ret;
    }
};

namespace _ITupleLambdas {
    template <typename...>
    struct _FirstArg;
    template <typename _First, typename... _Other>
    struct _FirstArg<_First,_Other...> {
        std::size_t operator() ( _First&& a, _Other&&... ) { return a; }
    };
    template <>
    struct _FirstArg<> {
        std::size_t operator()() { return 0; }
    };
    template <typename... _Args>
    std::size_t _first_arg ( _Args&&... __args ) { return _FirstArg<_Args...>{} ( std::forward<_Args>(__args)... ); }
    struct __size_get {
        template <typename... _Args>
        std::size_t operator() ( _Args&... __args ) { return _first_arg(__args.size()...); }
    };
    struct __size_all_eq {
        template <typename... _Args>
        bool operator() ( _Args&... __args ) { return all_eq(__args.size()...); }
    };
    template <typename _TupleIterator>
    struct __begin {
        template <typename... _Args>
        _TupleIterator operator() ( _Args&... __args ) { return _TupleIterator{__args.begin()...}; }
    };
    template <typename _TupleIterator>
    struct __end {
        template <typename... _Args>
        _TupleIterator operator() ( _Args&... __args ) { return _TupleIterator{__args.end()...}; }
    };
    template <typename _TupleIterator>
    struct __rbegin {
        template <typename... _Args>
        std::reverse_iterator<_TupleIterator> operator() ( _Args&... __args ) {
            return std::reverse_iterator<_TupleIterator>{_TupleIterator{__args.rbegin().base()...}};
        }
    };
    template <typename _TupleIterator>
    struct __rend {
        template <typename... _Args>
        std::reverse_iterator<_TupleIterator> operator() ( _Args&... __args ) {
            return std::reverse_iterator<_TupleIterator>{_TupleIterator{__args.rend().base()...}};
        }
    };
}

template <template <typename...> class _Tp, typename... _Types>
class ituple {
    template <typename> struct _TemplatedTrue { static constexpr bool value = true; };
    template <typename> struct _TemplatedFalse { static constexpr bool value = false; };
    template <typename _Callable>
    auto pass ( _Callable&& __callable ) const {
        return _PassHelperWrapper<_Types...>::pass(std::forward<_Callable>(__callable), tuple);
    }
    template <bool... _Const>
    using tuple_iterator = _ITupleIterator<typename _ITupleHelper<_Tp, _Types...>
                                         ::template _IteratorHelper<_Const...>
                                         ::template _Iterator<>::type, _Tp, _Types...>;

public:
    using iterator = tuple_iterator<_TemplatedFalse<_Types>::value...>;
    using const_iterator = tuple_iterator<_TemplatedTrue<_Types>::value...>;
    using reverse_iterator = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    ituple ( _Tp<_Types...>& tuple ) : tuple(tuple) {
        if ( !pass ( _ITupleLambdas::__size_all_eq{} ) )
            throw std::invalid_argument{"ituple: non-matching sizes"};
    }
    std::size_t size() const { return pass ( _ITupleLambdas::__size_get{} ); }

    template <std::nullptr_t, bool... _Const>
    tuple_iterator<_Const...> begin() { return pass ( _ITupleLambdas::__begin<tuple_iterator<_Const...>>{} ); }
    template <std::nullptr_t, bool... _Const>
    tuple_iterator<_Const...> end() { return pass ( _ITupleLambdas::__end<tuple_iterator<_Const...>>{} ); }
    template <std::nullptr_t, bool... _Const>
    std::reverse_iterator<tuple_iterator<_Const...>> rbegin() { return pass ( _ITupleLambdas::__rbegin<tuple_iterator<_Const...>>{} ); }
    template <std::nullptr_t, bool... _Const>
    std::reverse_iterator<tuple_iterator<_Const...>> rend() { return pass ( _ITupleLambdas::__rend<tuple_iterator<_Const...>>{} ); }

    iterator begin() { return begin<nullptr, _TemplatedFalse<_Types>::value...>(); }
    iterator end() { return end<nullptr, _TemplatedFalse<_Types>::value...>(); }
    reverse_iterator rbegin() { return rbegin<nullptr, _TemplatedFalse<_Types>::value...>(); }
    reverse_iterator rend() { return rend<nullptr, _TemplatedFalse<_Types>::value...>(); }

    const_iterator begin() const {
        return const_cast<ituple*>(this)->begin<nullptr, _TemplatedTrue<_Types>::value...>();
    }
    const_iterator end() const {
        return const_cast<ituple*>(this)->end<nullptr, _TemplatedTrue<_Types>::value...>();
    }
    const_reverse_iterator rbegin() const {
        return const_cast<ituple*>(this)->rbegin<nullptr, _TemplatedTrue<_Types>::value...>();
    }
    const_reverse_iterator rend() const {
        return const_cast<ituple*>(this)->rend<nullptr, _TemplatedTrue<_Types>::value...>();
    }

    const_iterator cbegin() const { return begin(); }
    const_iterator cend() const { return end(); }
    const_reverse_iterator crbegin() const { return rbegin(); }
    const_reverse_iterator crend() const { return rend(); }

private:
    _Tp<_Types...>& tuple;
};

template <template <typename...> class _Tp, typename... _Types>
class const_ituple {
    template <typename> struct _TemplatedTrue { static constexpr bool value = true; };
    template <typename _Callable>
    auto pass ( _Callable&& __callable ) const {
        return _PassHelperWrapper<_Types...>::pass(std::forward<_Callable>(__callable), tuple);
    }
    template <bool... _Const>
    using tuple_iterator = _ITupleIterator<typename _ITupleHelper<_Tp, _Types...>
                                         ::template _IteratorHelper<_Const...>
                                         ::template _Iterator<>::type, _Tp, _Types...>;

public:
    using const_iterator = tuple_iterator<_TemplatedTrue<_Types>::value...>;
    using iterator = const_iterator;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;
    using reverse_iterator = std::reverse_iterator<iterator>;

    const_ituple ( const _Tp<_Types...>& tuple ) : tuple{tuple} {
        if ( !pass ( _ITupleLambdas::__size_all_eq{} ) )
            throw std::invalid_argument{"const ituple: non-matching sizes"};
    }
    std::size_t size() const { return pass ( _ITupleLambdas::__size_get{} ); }

    const_iterator cbegin() const { return pass ( _ITupleLambdas::__begin<const_iterator>{} ); }
    const_iterator cend() const { return pass ( _ITupleLambdas::__end<const_iterator>{} ); }
    const_reverse_iterator crbegin() const { return pass ( _ITupleLambdas::__rbegin<const_iterator>{} ); }
    const_reverse_iterator crend() const { return pass ( _ITupleLambdas::__rend<const_iterator>{} ); }

    const_iterator begin() const { return cbegin(); }
    const_iterator end() const { return cend(); }
    const_reverse_iterator rbegin() const { return crbegin(); }
    const_reverse_iterator rend() const { return crend(); }

private:
    const _Tp<_Types...>& tuple;
};

template <template <typename...> class _Tp, typename... _Types>
class rvalue_ituple {
    template <typename> struct _TemplatedTrue { static constexpr bool value = true; };
    template <typename> struct _TemplatedFalse { static constexpr bool value = false; };
    template <typename _Callable>
    auto pass ( _Callable&& __callable ) const {
        return _PassHelperWrapper<_Types...>::pass(std::forward<_Callable>(__callable), tuple);
    }
    template <bool... _Const>
    using tuple_iterator = _ITupleIterator<typename _ITupleHelper<_Tp, _Types...>
                                         ::template _IteratorHelper<_Const...>
                                         ::template _Iterator<>::type, _Tp, _Types...>;

public:
    using iterator = tuple_iterator<_TemplatedFalse<_Types>::value...>;
    using const_iterator = tuple_iterator<_TemplatedTrue<_Types>::value...>;
    using reverse_iterator = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    rvalue_ituple ( _Tp<_Types...>&& tuple ) : tuple(std::forward<_Tp<_Types...>>(tuple)) {
        if ( !pass ( _ITupleLambdas::__size_all_eq{} ) )
            throw std::invalid_argument{"rvalue ituple: non-matching sizes"};
    }
    std::size_t size() const { return pass ( _ITupleLambdas::__size_get{} ); }

    template <std::nullptr_t, bool... _Const>
    tuple_iterator<_Const...> begin() { return pass ( _ITupleLambdas::__begin<tuple_iterator<_Const...>>{} ); }
    template <std::nullptr_t, bool... _Const>
    tuple_iterator<_Const...> end() { return pass ( _ITupleLambdas::__end<tuple_iterator<_Const...>>{} ); }
    template <std::nullptr_t, bool... _Const>
    std::reverse_iterator<tuple_iterator<_Const...>> rbegin() { return pass ( _ITupleLambdas::__rbegin<tuple_iterator<_Const...>>{} ); }
    template <std::nullptr_t, bool... _Const>
    std::reverse_iterator<tuple_iterator<_Const...>> rend() { return pass ( _ITupleLambdas::__rend<tuple_iterator<_Const...>>{} ); }

    iterator begin() { return begin<nullptr, _TemplatedFalse<_Types>::value...>(); }
    iterator end() { return end<nullptr, _TemplatedFalse<_Types>::value...>(); }
    reverse_iterator rbegin() { return rbegin<nullptr, _TemplatedFalse<_Types>::value...>(); }
    reverse_iterator rend() { return rend<nullptr, _TemplatedFalse<_Types>::value...>(); }

    const_iterator begin() const {
        return const_cast<rvalue_ituple*>(this)->begin<nullptr, _TemplatedTrue<_Types>::value...>();
    }
    const_iterator end() const {
        return const_cast<rvalue_ituple*>(this)->end<nullptr, _TemplatedTrue<_Types>::value...>();
    }
    const_reverse_iterator rbegin() const {
        return const_cast<rvalue_ituple*>(this)->rbegin<nullptr, _TemplatedTrue<_Types>::value...>();
    }
    const_reverse_iterator rend() const {
        return const_cast<rvalue_ituple*>(this)->rend<nullptr, _TemplatedTrue<_Types>::value...>();
    }

    const_iterator cbegin() const { return begin(); }
    const_iterator cend() const { return end(); }
    const_reverse_iterator crbegin() const { return rbegin(); }
    const_reverse_iterator crend() const { return rend(); }

private:
    _Tp<_Types...> tuple;
};

template <template <typename...> class _Tp, typename... _Types>
ituple<_Tp, _Types...> to_ituple ( _Tp<_Types...>& tuple ) { return tuple; }
template <template <typename...> class _Tp, typename... _Types>
const_ituple<_Tp, _Types...> to_ituple ( const _Tp<_Types...>& tuple ) { return tuple; }
template <template <typename...> class _Tp, typename... _Types>
rvalue_ituple<_Tp, _Types...> to_ituple ( _Tp<_Types...>&& tuple ) { return std::forward<_Tp<_Types...>>(tuple); }

template <typename _Tp1, typename _Tp2>
std::pair<_Tp1&&, _Tp2&&> forward_as_pair ( _Tp1&& a, _Tp2&& b ) {
    return {std::forward<_Tp1>(a), std::forward<_Tp2>(b)};
}
template <typename _Tp1, typename _Tp2>
rvalue_ituple<std::pair, _Tp1&&, _Tp2&&> forward_as_ipair ( _Tp1&& a, _Tp2&& b ) {
    return forward_as_pair(std::forward<_Tp1>(a), std::forward<_Tp2>(b));
}
template <typename... _Types>
rvalue_ituple<std::tuple, _Types&&...> forward_as_ituple ( _Types&&... __args ) {
    return std::forward_as_tuple(std::forward<_Types>(__args)...);
}

template <template <typename...> class _Tp, typename... _Types>
struct ctuple : _Tp<_Types...> {
    template <typename... _Args>
    ctuple ( _Args&&... __args ) : _Tp<_Types...>(std::forward<_Args>(__args)...) {}
    template <typename _Res>
    struct __construct {
        template <typename... _Args>
        _Res operator() ( _Args&&... __args ) { return _Res{std::forward<_Args>(__args)...}; }
    };
    template <typename _Res>
    operator _Res() && { return _PassHelperWrapper<_Types...>::pass(__construct<_Res>{}, std::move(*this)); }
};
template <template <typename...> class _Tp, typename... _Types>
ctuple<_Tp, _Types...> to_ctuple ( _Tp<_Types...>&& tuple ) { return std::forward<_Tp<_Types...>>(tuple); }
}

#define foreach2(I, A, B) for ( auto&& I: non_std::forward_as_ipair(A, B) )
#define foreach__(I, ...) for ( auto&& I: non_std::forward_as_ituple(__VA_ARGS__) )
#define foreach(A, ...) for ( auto&& __foreach_iterator: non_std::forward_as_ituple(__VA_ARGS__) ) \
    for ( bool __foreach_guard = true; __foreach_guard; ) for ( A = non_std::to_ctuple( \
        std::move(__foreach_iterator) ); __foreach_guard; __foreach_guard = false )

#endif // NON_STD_ITUPLE
