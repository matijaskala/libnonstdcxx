/*
 * Calculate x ** n
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_POWER
#define NON_STD_POWER

#include <functional>

namespace non_std {

template <typename Tp>
constexpr auto inverse_element(std::plus<Tp>) -> std::negate<Tp> { return {}; }

template <typename Tp>
constexpr Tp identity_element(std::plus<Tp>) { return Tp(0); }

template <typename Tp>
constexpr auto inverse_element(std::multiplies<Tp>) -> Tp(*)(const Tp&) { return [] (const Tp& x) { return 1/x; }; }

template <typename Tp>
constexpr Tp identity_element(std::multiplies<Tp>) { return Tp(1); }

template <typename Tp, typename Int, typename Op = std::multiplies<Tp>>
constexpr Tp power(Tp x, Int n, Op op = {}) {
    switch (n) {
        case 0:
            return identity_element(op);
        case 1:
            return x;
        case 2:
            return op(x, x);
    }
    if (n < 0)
        return power(inverse_element(op)(x), -n, op);
    if (n % 2)
        return op(power(power(x, n/2, op), 2, op), x);
    return power(power(x, n/2, op), 2, op);
}
}

#endif // NON_STD_POWER
