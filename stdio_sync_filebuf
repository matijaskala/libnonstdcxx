/*
 * Iostreams wrapper for stdio FILE
 * Copyright (C) 2016  Matija Skala <mskala@gmx.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_STDIO_SYNC_FILEBUF
#define NON_STD_STDIO_SYNC_FILEBUF

#include <streambuf>
#include "char32.h"

namespace non_std [[gnu::visibility("default")]] {

  template<typename _CharT, typename _Traits = std::char_traits<_CharT> >
    class stdio_sync_filebuf : public std::basic_streambuf<_CharT, _Traits>
    {
    public:
      // Types:
      typedef _CharT                                        char_type;
      typedef _Traits                                       traits_type;
      typedef typename traits_type::int_type                int_type;
      typedef typename traits_type::pos_type                pos_type;
      typedef typename traits_type::off_type                off_type;

    private:
      typedef std::basic_streambuf<_CharT, _Traits> __streambuf_type;

      // Underlying stdio FILE
      std::FILE* _M_file;

      // Last character gotten. This is used when pbackfail is
      // called from basic_streambuf::sungetc()
      int_type _M_unget_buf;

    public:
      explicit
      stdio_sync_filebuf(std::FILE* __f)
      : _M_file(__f), _M_unget_buf(traits_type::eof())
      { }

      stdio_sync_filebuf(stdio_sync_filebuf&& __fb) noexcept
      : __streambuf_type(std::move(__fb)),
      _M_file(__fb._M_file), _M_unget_buf(__fb._M_unget_buf)
      {
        __fb._M_file = nullptr;
        __fb._M_unget_buf = traits_type::eof();
      }

      stdio_sync_filebuf&
      operator=(stdio_sync_filebuf&& __fb) noexcept
      {
        __streambuf_type::operator=(__fb);
        _M_file = std::__exchange(__fb._M_file, nullptr);
        _M_unget_buf = std::__exchange(__fb._M_unget_buf, traits_type::eof());
        return *this;
      }

      void
      swap(stdio_sync_filebuf& __fb)
      {
        __streambuf_type::swap(__fb);
        std::swap(_M_file, __fb._M_file);
        std::swap(_M_unget_buf, __fb._M_unget_buf);
      }

      /**
       *  @return  The underlying FILE*.
       *
       *  This function can be used to access the underlying C file pointer.
       *  Note that there is no way for the library to track what you do
       *  with the file, so be careful.
       */
      std::FILE*
      file() { return this->_M_file; }

    protected:
      int_type
      syncgetc();

      int_type
      syncungetc(int_type __c);

      int_type
      syncputc(int_type __c);

      virtual int_type
      underflow()
      {
        int_type __c = this->syncgetc();
        return this->syncungetc(__c);
      }

      virtual int_type
      uflow()
      {
        // Store the gotten character in case we need to unget it.
        _M_unget_buf = this->syncgetc();
        return _M_unget_buf;
      }

      virtual int_type
      pbackfail(int_type __c = traits_type::eof())
      {
        int_type __ret;
        const int_type __eof = traits_type::eof();

        // Check if the unget or putback was requested
        if (traits_type::eq_int_type(__c, __eof)) // unget
          {
            if (!traits_type::eq_int_type(_M_unget_buf, __eof))
              __ret = this->syncungetc(_M_unget_buf);
            else // buffer invalid, fail.
              __ret = __eof;
          }
        else // putback
          __ret = this->syncungetc(__c);

        // The buffered character is no longer valid, discard it.
        _M_unget_buf = __eof;
        return __ret;
      }

      virtual std::streamsize
      xsgetn(char_type* __s, std::streamsize __n)
      {
        std::streamsize __ret = 0;
        const int_type __eof = traits_type::eof();
        while (__n--)
          {
            int_type __c = this->syncgetc();
            if (traits_type::eq_int_type(__c, __eof))
              break;
            __s[__ret] = traits_type::to_char_type(__c);
            ++__ret;
          }

        if (__ret > 0)
          _M_unget_buf = traits_type::to_int_type(__s[__ret - 1]);
        else
          _M_unget_buf = traits_type::eof();
        return __ret;
      }

      virtual int_type
      overflow(int_type __c = traits_type::eof())
      {
        int_type __ret;
        if (traits_type::eq_int_type(__c, traits_type::eof()))
          {
            if (std::fflush(_M_file))
              __ret = traits_type::eof();
            else
              __ret = traits_type::not_eof(__c);
          }
        else
          __ret = this->syncputc(__c);
        return __ret;
      }

      virtual std::streamsize
      xsputn(const char_type* __s, std::streamsize __n)
      {
        std::streamsize __ret = 0;
        const int_type __eof = traits_type::eof();
        while (__n--)
          {
            if (traits_type::eq_int_type(this->syncputc(*__s++), __eof))
              break;
            ++__ret;
          }
        return __ret;
      }

      virtual int
      sync()
      { return std::fflush(_M_file); }

      virtual std::streampos
      seekoff(std::streamoff __off, std::ios_base::seekdir __dir,
              std::ios_base::openmode = std::ios_base::in | std::ios_base::out)
      {
        std::streampos __ret(std::streamoff(-1));
        int __whence;
        if (__dir == std::ios_base::beg)
          __whence = SEEK_SET;
        else if (__dir == std::ios_base::cur)
          __whence = SEEK_CUR;
        else
          __whence = SEEK_END;
        if (!fseek(_M_file, __off, __whence))
          __ret = std::streampos(std::ftell(_M_file));
        return __ret;
      }

      virtual std::streampos
      seekpos(std::streampos __pos,
              std::ios_base::openmode __mode =
              std::ios_base::in | std::ios_base::out)
      { return seekoff(std::streamoff(__pos), std::ios_base::beg, __mode); }
    };

  template<>
    stdio_sync_filebuf<char32_t>::int_type
    stdio_sync_filebuf<char32_t>::syncgetc()
    {
        return getc32(file());
    }

  template<>
    stdio_sync_filebuf<char32_t>::int_type
    stdio_sync_filebuf<char32_t>::syncungetc(int_type __c)
    {
        return ungetc32(__c, file());
    }

  template<>
    stdio_sync_filebuf<char32_t>::int_type
    stdio_sync_filebuf<char32_t>::syncputc(int_type __c)
    {
        return putc32(__c, file());
    }

  template<>
    stdio_sync_filebuf<char16_t>::int_type
    stdio_sync_filebuf<char16_t>::syncgetc()
    {
        return getc16(file());
    }

  template<>
    stdio_sync_filebuf<char16_t>::int_type
    stdio_sync_filebuf<char16_t>::syncungetc(int_type __c)
    {
        return ungetc32(__c, file());
    }

  template<>
    stdio_sync_filebuf<char16_t>::int_type
    stdio_sync_filebuf<char16_t>::syncputc(int_type __c)
    {
        return putc32(__c, file());
    }
}

#endif // NON_STD_STDIO_SYNC_FILEBUF
