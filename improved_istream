/*
 * Input stream that supports char16_t and char32_t
 * Copyright (C) 2016  Matija Skala <mskala@gmx.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_IMPROVED_ISTREAM
#define NON_STD_IMPROVED_ISTREAM

#include <istream>

namespace non_std {

class improved_istream : public std::istream {
    typedef std::char_traits<wchar_t>         wtraits_type;
    typedef std::char_traits<char16_t>        traits16_type;
    typedef std::char_traits<char32_t>        traits32_type;

    char16_t _M_trail_char16 = u'\0';

    void _M_setstate(iostate __state) {
        try { setstate(__state); } catch(...) {}
        if (exceptions() & __state) throw;
    }

    void swap(improved_istream& __rhs) {
        basic_istream::swap(__rhs);
        std::swap(_M_trail_char16, __rhs._M_trail_char16);
    }

public:
    improved_istream() = default;
    improved_istream(improved_istream&& __rhs)
        : basic_istream{std::forward<basic_istream>(__rhs)}
        , _M_trail_char16{__rhs._M_trail_char16}
        { __rhs._M_trail_char16 = u'\0'; }
    explicit improved_istream(std::streambuf* __sb) : basic_istream{__sb} {}

    improved_istream& operator=(improved_istream&& __rhs) { swap(__rhs); return *this; }

    int_type get() { return basic_istream::get(); }
    improved_istream& get(char& __c) { basic_istream::get(__c); return *this; }
    improved_istream& get(wchar_t& __c);
    improved_istream& get(char16_t& __c);
    improved_istream& get(char32_t& __c);

    improved_istream& get(std::streambuf& __sb, char __delim = '\n') { basic_istream::get(__sb, __delim); return *this; }
    improved_istream& get(char* __s, std::streamsize __n, char __delim = '\n') { basic_istream::get(__s, __n, __delim); return *this; }
    improved_istream& getline(char* __s, std::streamsize __n, char __delim = '\n') { basic_istream::getline(__s, __n, __delim); return *this; }

    improved_istream& ignore(std::streamsize __n, int_type __delim) { basic_istream::ignore(__n, __delim); return *this; }
    improved_istream& ignore(std::streamsize __n) { basic_istream::ignore(__n); return *this; }
    improved_istream& ignore() { basic_istream::ignore(); return *this; }

    improved_istream& read(char* __s, std::streamsize __n) { basic_istream::read(__s, __n); return *this; }
    improved_istream& read(wchar_t* __s, std::streamsize __n);
    improved_istream& read(char16_t* __s, std::streamsize __n);
    improved_istream& read(char32_t* __s, std::streamsize __n);

    std::streamsize readsome(char* __s, std::streamsize __n) { return basic_istream::readsome(__s, __n); }
    std::streamsize readsome(wchar_t* __s, std::streamsize __n);
    std::streamsize readsome(char16_t* __s, std::streamsize __n);
    std::streamsize readsome(char32_t* __s, std::streamsize __n);

    improved_istream& putback(char __c) { basic_istream::putback(__c); return *this; }
    improved_istream& putback(wchar_t __c);
    improved_istream& putback(char16_t __c);
    improved_istream& putback(char32_t __c);

    improved_istream& unget() { basic_istream::unget(); return *this; }
    improved_istream& seekg(pos_type __pos) { basic_istream::seekg(__pos); return *this; }
    improved_istream& seekg(off_type __off, seekdir __dir) { basic_istream::seekg(__off, __dir); return *this; }

    improved_istream& operator>>(wchar_t& __c);
    improved_istream& operator>>(char16_t& __c);
    improved_istream& operator>>(char32_t& __c);

    improved_istream& operator>>(char* __s) { static_cast<basic_istream&>(*this) >> __s; return *this; }
    improved_istream& operator>>(wchar_t* __s);
    improved_istream& operator>>(char16_t* __s);
    improved_istream& operator>>(char32_t* __s);
    improved_istream& operator>>(std::streambuf* __sb) { basic_istream::operator>>(__sb); return *this; }
    improved_istream& operator>>(std::wstring& __str);
    improved_istream& operator>>(std::u16string& __str);
    improved_istream& operator>>(std::u32string& __str);

    template<typename _Tp>
    improved_istream& operator>>(_Tp& __x) { static_cast<basic_istream&>(*this) >> __x; return *this; }
};
}

#endif // NON_STD_IMPROVED_ISTREAM
