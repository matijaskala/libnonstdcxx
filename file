/*
 * Information about a file
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_FILE
#define NON_STD_FILE

#include <string>
#include <sys/stat.h>
#include "directory"

namespace non_std
{

class file
{
public:
    enum Type {
        PIPE,
        CHARACTER_DEVICE,
        DIRECTORY,
        BLOCK_DEVICE,
        REGULAR,
        SYMLINK,
        SOCKET,
    };

    file ( std::string fullname ) {
	while ( fullname.back() == '/' )
	    fullname.pop_back();
	auto l = fullname.rfind ( '/' );
	m_path = fullname.substr ( 0, l );
	m_name = fullname.substr ( l + 1 );

	while (m_path.back() == '/')
	    m_path.pop_back();
	refresh();
    }

    file ( directory::entry e ) {
	m_path = e.path();
	m_name = e.name()

	while (m_path.back() == '/')
	    m_path.pop_back();
	refresh();
    }

    void refresh() {
        struct stat64 st;
#ifdef _WIN32
        stat64 ( fullname().c_str(), &st );
#else
        lstat64 ( fullname().c_str(), &st );
#endif

        m_mode = st.st_mode & 07777;
        m_type = static_cast<Type> ( st.st_mode >> 13 );
    }

    const std::string& name() const { return m_name; }
    const std::string& path() const { return m_path; }
    std::string fullname() const { return path() + "/" + name(); }

    std::uint16_t mode() const { return m_mode; }
    Type type() const { return m_type; }

private:
    std::string m_name;
    std::string m_path;

    std::uint16_t m_mode;
    Type m_type;

};
}

#endif // NON_STD_FILE
