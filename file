/*
 * Information about a file
 * Copyright (C) 2014-2021 Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_FILE
#define NON_STD_FILE

#include <filesystem>
#include <string>
#include "directory"

namespace non_std
{

class [[deprecated]] file
{
public:
    enum filetype {
        pipe,
        character_device,
        directory,
        block_device,
        regular,
        symlink,
        socket,
    };

    file ( std::string fullname ) {
        while ( fullname.back() == '/' )
            fullname.pop_back();
        auto l = fullname.rfind ( '/' );
        m_path = fullname.substr ( 0, l );
        m_name = fullname.substr ( l + 1 );

        while (m_path.back() == '/')
            m_path.pop_back();
        refresh();
    }

    file ( std::filesystem::path p ) {
        m_path = p.parent_path();
        m_name = p.filename();
        refresh();
    }

    file ( directory::entry e ) {
        m_path = e.path();
        m_name = e.name();

        while (m_path.back() == '/')
            m_path.pop_back();
        refresh();
    }

    void refresh() {
        auto entry = std::filesystem::directory_entry(fullname());

        m_mode = static_cast<std::uint16_t>(entry.status().permissions());
        switch (entry.symlink_status().type()) {
            case std::filesystem::file_type::fifo:
                m_type = pipe;
                break;
            case std::filesystem::file_type::character:
                m_type = character_device;
                break;
            case std::filesystem::file_type::directory:
                m_type = directory;
                break;
            case std::filesystem::file_type::block:
                m_type = block_device;
                break;
            case std::filesystem::file_type::regular:
                m_type = regular;
                break;
            case std::filesystem::file_type::symlink:
                m_type = symlink;
                break;
            case std::filesystem::file_type::socket:
                m_type = socket;
                break;
            default:
                m_type = static_cast<filetype> (7);
        }
    }

    const std::string& name() const { return m_name; }
    const std::string& path() const { return m_path; }
    std::string fullname() const { return path() + "/" + name(); }

    std::uint16_t mode() const { return m_mode; }
    filetype type() const { return m_type; }

private:
    std::string m_name;
    std::string m_path;

    std::uint16_t m_mode;
    filetype m_type;

};
}

#endif // NON_STD_FILE
