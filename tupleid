/*
 * Information about multiple types
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef TUPLEID
#define TUPLEID

#include <memory>
#if defined __GNUC__ || defined __clang__
#include "cxxabi"
#endif
#include "nullref"

namespace non_std {
    struct tuple_index;
}
template <typename Tp>
auto dynamic_tupleid ( const Tp& ) -> non_std::tuple_index;
template <typename Tp>
auto static_tupleid ( const Tp& = nullref ) -> non_std::tuple_index;

namespace non_std
{

struct tuple_index {
    bool operator== ( const tuple_index& rhs ) const {
        if ( m_count != rhs.m_count )
            return false;
        for ( std::size_t i = 0; i < m_count; i++ )
            if ( !(*m_data.get()[i] == *rhs.m_data.get()[i]) )
                return false;
        return true;
    }
    bool operator!= ( const tuple_index& rhs ) const {
        if ( m_count != rhs.m_count )
            return true;
        for ( std::size_t i = 0; i < m_count; i++ )
            if ( *m_data.get()[i] != *rhs.m_data.get()[i] )
                return true;
        return false;
    }
    std::size_t hash_code () const noexcept {
        std::size_t r = 0;
        for ( std::size_t i = 0; i < m_count; i++ )
            r += m_data.get()[i]->hash_code();
        return r;
    }
#if !defined __GNUC__ && !defined __clang__
#define demangle
#endif
    std::string name () const {
        if ( !m_count )
            return "";
        std::string ret = demangle(m_data.get()[0]->name());
        for ( std::size_t i = 1; i < m_count; i++ ) {
            ret += ", ";
            ret += demangle(m_data.get()[i]->name());
        }
        return ret;
    }
    std::string name ( std::size_t i ) const {
        if ( i >= m_count )
            throw std::out_of_range ( "tuple_index::name(size_t)" );
        return demangle(m_data.get()[i]->name());
    }
#undef demangle

private:
    template <typename Tp>
    friend auto ::dynamic_tupleid ( const Tp& ) -> tuple_index;
    template <typename Tp>
    friend auto ::static_tupleid ( const Tp& ) -> tuple_index;
    tuple_index ( std::size_t count )
    : m_data{new const std::type_info*[count], [] ( const std::type_info** data ) { delete[] data; }}
    , m_count{count} {}
    std::shared_ptr<const std::type_info*> m_data;
    std::size_t m_count;
};
}

namespace std {

template <>
struct hash<non_std::tuple_index>
{
    using result_type = size_t;
    using argument_type = non_std::tuple_index;
    result_type operator()(const argument_type& arg) const noexcept {
        return arg.hash_code();
    }
};
}

template <typename Tp, std::size_t i = std::tuple_size<Tp>{}>
struct StaticTupleIdHelper_ {
    static void get ( const std::type_info** data ) {
        data[i - 1] = &typeid(typename std::tuple_element<i - 1, Tp>::type);
        StaticTupleIdHelper_<Tp, i - 1>::get(data);
    }
};

template <typename Tp>
struct StaticTupleIdHelper_<Tp, 0> {
    static void get ( const std::type_info** ) {}
};

template <typename Tp>
auto static_tupleid ( const Tp& ) -> non_std::tuple_index {
    non_std::tuple_index index{std::tuple_size<Tp>{}};
    StaticTupleIdHelper_<Tp>::get(index.m_data.get());
    return index;
}

template <typename... Types>
auto static_typeid ( Types&&... ) -> non_std::tuple_index {
    return static_tupleid<std::tuple<Types...>>();
}

template <typename... Types>
auto static_typeid () -> non_std::tuple_index {
    return static_tupleid<std::tuple<Types...>>();
}

template <typename Tp, std::size_t i = std::tuple_size<Tp>{}>
struct DynamicTupleIdHelper_ {
    static void get ( const std::type_info** data, const Tp& tuple ) {
        data[i - 1] = &typeid(std::get<i - 1> ( tuple ));
        DynamicTupleIdHelper_<Tp, i - 1>::get(data, tuple);
    }
};

template <typename Tp>
struct DynamicTupleIdHelper_<Tp, 0> {
    static void get ( const std::type_info**, const Tp& ) {}
};

template <typename Tp>
auto dynamic_tupleid ( const Tp& tp ) -> non_std::tuple_index {
    non_std::tuple_index index{std::tuple_size<Tp>{}};
    DynamicTupleIdHelper_<Tp>::get(index.m_data.get(), tp);
    return index;
}

template <typename... Types>
auto dynamic_typeid ( Types&&... types ) -> non_std::tuple_index {
    return dynamic_tupleid(std::forward_as_tuple(std::forward<Types>(types)...));
}

#endif // TUPLEID
