/*
 * Information about multiple types
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef TUPLEID
#define TUPLEID

#include <tuple>
#include <typeindex>
#if defined __GNUC__ || defined __clang__
#include "cxxabi"
#endif
#include "nullref"

#define tupleid(...) non_std::tuple_info::create<__typeof__(__VA_ARGS__)> ()
#define typeid2(...) tupleid(std::tuple<__typeof__(__VA_ARGS__)>)

namespace non_std [[gnu::visibility("default")]]
{

struct tuple_index {
    tuple_index ( const tuple_index& other )
    : tuple_index{other._M_count} {
        for ( std::size_t i = 0; i < _M_count; i++ )
            _M_data[i] = other._M_data[i];
    }
    tuple_index ( tuple_index&& other )
    : _M_data{other._M_data}
    , _M_count{other._M_count} {
        other._M_data = nullptr;
        other._M_count = 0;
    }
    ~tuple_index () { delete[] _M_data; }
    bool operator== ( const tuple_index& __rhs ) {
        if ( _M_count != __rhs._M_count )
            return false;
        for ( std::size_t i = 0; i < _M_count; i++ )
            if ( !(_M_data[i] == __rhs._M_data[i]) )
                return false;
        return true;
    }
    bool operator!= ( const tuple_index& __rhs ) {
        if ( _M_count != __rhs._M_count )
            return true;
        for ( std::size_t i = 0; i < _M_count; i++ )
            if ( _M_data[i] != __rhs._M_data[i] )
                return true;
        return false;
    }
#if !defined __GNUC__ && !defined __clang__
#define demangle
#endif
    std::string name () const {
        if ( !_M_count )
            return "";
        std::string ret = demangle(_M_data[0]->name());
        for ( std::size_t i = 1; i < _M_count; i++ ) {
            ret += ", ";
            ret += demangle(_M_data[i]->name());
        }
        return ret;
    }
    std::string name ( std::size_t i ) const {
        if ( i >= _M_count )
            throw std::out_of_range ( "tuple_index::name(size_t)" );
        return demangle(_M_data[i]->name());
    }
#undef demangle

private:
    template <typename _Tp>
    friend tuple_index dynamic_tupleid ( _Tp&& tuple );
    template <typename _Tp>
    friend tuple_index dynamic_tupleid ( const _Tp& tuple );
    template <typename _Tp>
    friend tuple_index static_tupleid ( const _Tp& = nullref );
    tuple_index ( std::size_t count )
    : _M_data{new const std::type_info*[count]}
    , _M_count{count} {}
    const std::type_info** _M_data;
    std::size_t _M_count;
};

template <typename _Tp, std::size_t __i = 0>
struct _StaticTupleIdHelper {
    static void get ( const std::type_info** data ) {
        data[__i] = &typeid(typename std::tuple_element<__i, _Tp>::type);
        _StaticTupleIdHelper<_Tp, __i + 1>::get(data);
    }
};

template <typename _Tp>
struct _StaticTupleIdHelper<_Tp, (std::size_t)std::tuple_size<_Tp>{}> {
    static void get ( const std::type_info** ) {}
};

template <typename _Tp>
tuple_index static_tupleid ( const _Tp& ) {
    tuple_index index{std::tuple_size<_Tp>{}};
    _StaticTupleIdHelper<_Tp>::get(index._M_data);
    return index;
}

template <typename... _Types>
tuple_index static_typeid ( _Types&&... ) {
    return static_tupleid<std::tuple<_Types...>>();
}

template <typename... _Types>
tuple_index static_typeid () {
    return static_tupleid<std::tuple<_Types...>>();
}

template <typename _Tp, std::size_t __i = 0>
struct _DynamicTupleIdHelper {
    static void get ( const std::type_info** data, const _Tp& tuple ) {
        data[__i] = &typeid(std::get<__i> ( tuple ));
        _DynamicTupleIdHelper<_Tp, __i + 1>::get(data, tuple);
    }
};

template <typename _Tp>
struct _DynamicTupleIdHelper<_Tp, (std::size_t)std::tuple_size<_Tp>{}> {
    static void get ( const std::type_info**, const _Tp& ) {}
};

template <typename _Tp>
tuple_index dynamic_tupleid ( const _Tp& __tp ) {
    tuple_index index{std::tuple_size<_Tp>{}};
    _DynamicTupleIdHelper<_Tp>::get(index._M_data, __tp);
    return index;
}

template <typename... _Types>
tuple_index dynamic_typeid ( _Types&&... __types ) {
    return dynamic_tupleid(std::forward_as_tuple(std::forward<_Types>(__types)...));
}

template <typename... _Types>
struct _TupleId;
struct _TupleIdBase;

struct tuple_info {
    template <typename _Tuple>
    static tuple_info create() { return {new _TupleId<_Tuple>}; }
    tuple_info ( const tuple_info& other ) = delete;
    tuple_info ( tuple_info&& other );
    ~tuple_info();
    tuple_info operator[] ( int i ) const;
    operator std::type_index();
    std::string name() const;
    int count() const;

private:
    tuple_info ( _TupleIdBase* __tupleid );
    _TupleIdBase* _M_tupleid;
};

struct _TupleIdBase {
    virtual ~_TupleIdBase() = default;
    virtual tuple_info operator[] ( int ) { throw std::out_of_range ( "tuple_info::operator[]" ); }
    virtual operator std::type_index() { throw std::bad_typeid{}; }
    virtual std::string name() = 0;
    virtual int count() = 0;
};

template <typename _FirstType, typename... _OtherTypes>
struct _TupleId<std::tuple<_FirstType, _OtherTypes...>> : _TupleIdBase {
    virtual tuple_info operator[] ( int i ) override {
        return i ? _TupleId<std::tuple<_OtherTypes...>>{}[i-1] : _TupleId<std::tuple<_FirstType>>{}[0];
    }
    virtual std::string name() override {
        return _TupleId<std::tuple<_FirstType>>{}.name() + ", " + _TupleId<std::tuple<_OtherTypes...>>{}.name();
    }
    virtual int count() override {
        return 1 + _TupleId<std::tuple<_OtherTypes...>>{}.count();
    }
};

template <typename _OnlyOneType>
struct _TupleId<std::tuple<_OnlyOneType>> : _TupleIdBase {
    virtual tuple_info operator[] ( int i ) override {
        if ( i != 0 )
            return _TupleIdBase::operator[](0);
        return typeid2(_OnlyOneType);
    }
    virtual operator std::type_index() override {
        return typeid(_OnlyOneType);
    }
    virtual std::string name() override {
#ifdef __GNUC__
        return non_std::demangle(static_cast<std::type_index>(*this).name());
#else
        return static_cast<std::type_index>(*this).name();
#endif
    }
    virtual int count() override {
        return 1;
    }
};

template <>
struct _TupleId<std::tuple<>> : _TupleIdBase {
    virtual std::string name() override {
        return "";
    }
    virtual int count() override {
        return 0;
    }
};

template <typename _Tp1,typename _Tp2>
struct _TupleId<std::pair<_Tp1, _Tp2>> : _TupleId<std::tuple<_Tp1,_Tp2>> {};
}

#endif // TUPLEID
