/*
 * Information about multiple types
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef TUPLEID
#define TUPLEID

#include <memory>
#include <tuple>
#include <typeindex>
#if defined __GNUC__ || defined __clang__
#include "cxxabi"
#endif
#include "nullref"

namespace non_std {
    struct tuple_index;
}
template <typename _Tp>
auto dynamic_tupleid ( const _Tp& ) -> non_std::tuple_index;
template <typename _Tp>
auto static_tupleid ( const _Tp& = nullref ) -> non_std::tuple_index;

namespace non_std
{

struct tuple_index {
    bool operator== ( const tuple_index& __rhs ) {
        if ( _M_count != __rhs._M_count )
            return false;
        for ( std::size_t i = 0; i < _M_count; i++ )
            if ( !(_M_data.get()[i] == __rhs._M_data.get()[i]) )
                return false;
        return true;
    }
    bool operator!= ( const tuple_index& __rhs ) {
        if ( _M_count != __rhs._M_count )
            return true;
        for ( std::size_t i = 0; i < _M_count; i++ )
            if ( _M_data.get()[i] != __rhs._M_data.get()[i] )
                return true;
        return false;
    }
#if !defined __GNUC__ && !defined __clang__
#define demangle
#endif
    std::string name () const {
        if ( !_M_count )
            return "";
        std::string ret = demangle(_M_data.get()[0]->name());
        for ( std::size_t i = 1; i < _M_count; i++ ) {
            ret += ", ";
            ret += demangle(_M_data.get()[i]->name());
        }
        return ret;
    }
    std::string name ( std::size_t i ) const {
        if ( i >= _M_count )
            throw std::out_of_range ( "tuple_index::name(size_t)" );
        return demangle(_M_data.get()[i]->name());
    }
#undef demangle

private:
    template <typename _Tp>
    friend auto ::dynamic_tupleid ( const _Tp& ) -> tuple_index;
    template <typename _Tp>
    friend auto ::static_tupleid ( const _Tp& ) -> tuple_index;
    tuple_index ( std::size_t count )
    : _M_data{new const std::type_info*[count], [] ( const std::type_info** data ) { delete[] data; }}
    , _M_count{count} {}
    std::shared_ptr<const std::type_info*> _M_data;
    std::size_t _M_count;
};
}

template <typename _Tp, std::size_t __i = 0>
struct _StaticTupleIdHelper {
    static void get ( const std::type_info** data ) {
        data[__i] = &typeid(typename std::tuple_element<__i, _Tp>::type);
        _StaticTupleIdHelper<_Tp, __i + 1>::get(data);
    }
};

template <typename _Tp>
struct _StaticTupleIdHelper<_Tp, (std::size_t)std::tuple_size<_Tp>{}> {
    static void get ( const std::type_info** ) {}
};

template <typename _Tp>
auto static_tupleid ( const _Tp& ) -> non_std::tuple_index {
    non_std::tuple_index index{std::tuple_size<_Tp>{}};
    _StaticTupleIdHelper<_Tp>::get(index._M_data.get());
    return index;
}

template <typename... _Types>
auto static_typeid ( _Types&&... ) -> non_std::tuple_index {
    return static_tupleid<std::tuple<_Types...>>();
}

template <typename... _Types>
auto static_typeid () -> non_std::tuple_index {
    return static_tupleid<std::tuple<_Types...>>();
}

template <typename _Tp, std::size_t __i = 0>
struct _DynamicTupleIdHelper {
    static void get ( const std::type_info** data, const _Tp& tuple ) {
        data[__i] = &typeid(std::get<__i> ( tuple ));
        _DynamicTupleIdHelper<_Tp, __i + 1>::get(data, tuple);
    }
};

template <typename _Tp>
struct _DynamicTupleIdHelper<_Tp, (std::size_t)std::tuple_size<_Tp>{}> {
    static void get ( const std::type_info**, const _Tp& ) {}
};

template <typename _Tp>
auto dynamic_tupleid ( const _Tp& __tp ) -> non_std::tuple_index {
    non_std::tuple_index index{std::tuple_size<_Tp>{}};
    _DynamicTupleIdHelper<_Tp>::get(index._M_data.get(), __tp);
    return index;
}

template <typename... _Types>
auto dynamic_typeid ( _Types&&... __types ) -> non_std::tuple_index {
    return dynamic_tupleid(std::forward_as_tuple(std::forward<_Types>(__types)...));
}

#endif // TUPLEID
