/*
 * twodimensional array
 * Copyright (C) 2023  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include <array>

namespace non_std {

template<typename Tp, int X, int Y>
class matrix {
public:
    Tp& operator()(int x, int y) {
        return data[x+X*y];
    }
    const Tp& operator()(int x, int y) const {
        return data[x+X*y];
    }
    template<typename S>
    matrix& operator*= (S s) {
        for (auto& i: data)
            i *= s;
        return *this;
    }
    template<typename S>
    matrix& operator/= (S s) {
        for (auto& i: data)
            i /= s;
        return *this;
    }
    template<typename S>
    matrix operator* (S s) const {
        matrix ret = *this;
        return ret *= s;
    }
    template<typename S>
    matrix operator/ (S s) const {
        matrix ret = *this;
        return ret /= s;
    }
    matrix& operator+= (const matrix& other) {
        for (auto i = std::begin(data), j = std::begin(other.data); i != std::end(data); i++, j++)
            *i += *j;
        return *this;
    }
    matrix& operator-= (const matrix& other) {
        for (auto i = std::begin(data), j = std::begin(other.data); i != std::end(data); i++, j++)
            *i -= *j;
        return *this;
    }
    matrix operator+ (const matrix& other) const {
        matrix ret = *this;
        return ret += other;
    }
    matrix operator- (const matrix& other) const {
        matrix ret = *this;
        return ret -= other;
    }
    template<int Z>
    matrix<Tp, Z, Y> operator* (const matrix<Tp, Z, X>& other) const {
        matrix<Tp, Z, Y> ret;
        for (int i = 0; i < Z; i++)
            for (int j = 0; j < Y; j++) {
                ret(i, j) = 0;
                for (int k = 0; k < X; k++)
                    ret(i, j) += (*this)(k, j) * other(i, k);
            }
        return ret;
    }
    matrix transpose() const {
        matrix<Tp, Y, X> ret;
        for (int x = 0; x < X; x++)
            for (int y = 0; y < Y; y++)
                ret(y, x) = (*this)(x, y);
        return ret;
    }
    static matrix left_identity() {
        matrix<Tp, Y, Y> ret;
        for (int i = 0; i < Y; i++)
            for (int j = 0; j < Y; j++)
                ret(i, j) = i == j ? 1 : 0;
        return ret;
    }
    static matrix right_identity() {
        matrix<Tp, X, X> ret;
        for (int i = 0; i < X; i++)
            for (int j = 0; j < X; j++)
                ret(i, j) = i == j ? 1 : 0;
        return ret;
    }

private:
    std::array<Tp, X*Y> data;
};
}
