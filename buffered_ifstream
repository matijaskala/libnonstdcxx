/*
 * Buffered input file stream
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_BUFFERED_IFSTREAM
#define NON_STD_BUFFERED_IFSTREAM

#include <fstream>

namespace non_std
{

template< typename CharT, typename Traits = std::char_traits<CharT> >
class basic_buffered_ifstream;

using buffered_ifstream = basic_buffered_ifstream<char>;

template< typename CharT, typename Traits >
class basic_buffered_ifstream
{
public:
    basic_buffered_ifstream ( std::string file )
        : m_stream ( file ) {
    }

    typename Traits::int_type get() {
        m_fill_buffer();
        if ( m_eof )
            return Traits::eof();
        else
            return Traits::to_int_type ( m_buffer[m_offset++] );
    }

    typename Traits::int_type peek() {
        m_fill_buffer();
        if ( m_eof )
            return Traits::eof();
        else
            return Traits::to_int_type ( m_buffer[m_offset] );
    }

    bool is_open() { return m_stream.is_open(); }

    std::basic_istream<CharT, Traits>& stream() { return m_stream; }

private:
    std::basic_ifstream<CharT, Traits> m_stream;
    CharT m_buffer[0x800];
    std::uint32_t m_buffer_size = 0;
    std::uint32_t m_offset = 0;
    bool m_eof = false;
    void m_fill_buffer() {
        if ( m_offset >= m_buffer_size ) {
            if ( m_stream.rdbuf()->sgetc() == Traits::eof() ) {
                m_eof = true;
            }
            else {
                m_offset = 0;
                m_buffer_size = m_stream.readsome ( m_buffer, sizeof ( m_buffer ) );
            }
        }
    }
};
}

#endif // NON_STD_BUFFERED_IFSTREAM
