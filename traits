/*
 * Nonstandard c++ traits
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_TRAITS
#define NON_STD_TRAITS

namespace non_std {

template<typename T> struct is_char { using value_type = bool; static constexpr value_type value = false;
                                      constexpr operator value_type() { return value; } };
template<> struct is_char<char> { using value_type = bool; static constexpr value_type value = true;
                                  constexpr operator value_type() { return value; } };
template<> struct is_char<wchar_t> { using value_type = bool; static constexpr value_type value = true;
                                     constexpr operator value_type() { return value; } };
#if __cplusplus >= 202002L || defined __cpp_char8_t && __cpp_char8_t >= 201811L
template<> struct is_char<char8_t> { using value_type = bool; static constexpr value_type value = true;
                                      constexpr operator value_type() { return value; } };
#endif
template<> struct is_char<char16_t> { using value_type = bool; static constexpr value_type value = true;
                                      constexpr operator value_type() { return value; } };
template<> struct is_char<char32_t> { using value_type = bool; static constexpr value_type value = true;
                                      constexpr operator value_type() { return value; } };
template<typename T> struct is_string { using value_type = bool; static constexpr value_type value = false;
                                        constexpr operator value_type() { return value; } };
template<typename C> struct is_string<std::basic_string<C>> : is_char<C> {};

template<typename Type>
struct remove_everything {
private:
    template<typename,int> struct remove_everything_1;
    template<typename,int> struct remove_everything_2;
    template<typename T> struct remove_everything_1<T,2> { using type = T; };
    template<typename T> struct remove_everything_2<T,2> { using type = T; };
    template<typename T, int internal> struct remove_everything_1 : remove_everything_2<T,internal+1> {};
    template<typename T, int internal> struct remove_everything_1<T*,internal> : remove_everything_2<T,0> {};
    template<typename T, int internal> struct remove_everything_1<T&,internal> : remove_everything_2<T,0> {};
    template<typename T, int internal> struct remove_everything_1<T&&,internal> : remove_everything_2<T,0> {};
    template<typename T, int internal> struct remove_everything_1<T[],internal> : remove_everything_2<T,0> {};
    template<typename T, int internal> struct remove_everything_2 : remove_everything_1<T,internal+1> {};
    template<typename T, int internal> struct remove_everything_2<T const,internal> : remove_everything_1<T,0> {};
    template<typename T, int internal> struct remove_everything_2<T volatile,internal> : remove_everything_1<T,0> {};
    template<typename T, int internal> struct remove_everything_2<T const volatile,internal> : remove_everything_1<T,0> {};
    template<typename T, int internal, std::size_t size> struct remove_everything_1<T[size],internal> : remove_everything_1<T,0> {};

public:
    using type = typename remove_everything_1<Type,0>::type;
};
template<typename Type>
using remove_everything_t = typename remove_everything<Type>::type;
}

#define CLASSOF(object) ::non_std::remove_everything_t<decltype(object)>
#define __classof__(object) ::non_std::remove_everything_t<decltype(object)>
#define this_t CLASSOF(this)

#endif // NON_STD_TRAITS
