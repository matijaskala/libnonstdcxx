/*
 * Typesafe callback system
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_SIGNAL
#define NON_STD_SIGNAL

#include <functional>
#include <list>
#include <mutex>

namespace non_std
{

template< typename... >
class signal;

template< typename... Args >
class slot
{
    friend class signal<Args...>;
    std::function<void(Args...)> m_func;
    std::list<signal<Args...>*> m_signals;
    void* m_data{nullptr};
    std::mutex m_mutex;

    template< class Object >
    struct simple_bind {
        void (Object::*method) (Args...);
        Object* obj;
        simple_bind(void (Object::*method) (Args...), Object* obj) : method{method}, obj{obj} {}
        void operator() (Args&&... args) { (obj->*method) ( std::forward<Args> (args)... ); }
    };

public:
    template< typename Functor >
    slot ( Functor func ) : m_func{func} {}

    template< typename Object >
    slot ( void (Object::*method) (Args...), Object* obj ) : m_func{simple_bind<Object>{method,obj}} {}

    ~slot();

    template<typename... Args2>
    void operator() ( Args2&&... args ) { m_func ( std::forward<Args2> ( args )... ); }

    template< typename _Data = void >
    _Data* data() { return static_cast<_Data*> ( m_data ); }
};

template< typename... Args >
class signal : public slot<Args...>
{
    friend class slot<Args...>;
    std::list<slot<Args...>*> m_slots;

public:
    signal ( void* data );
    ~signal();
    template< typename Object, typename Slot >
    void connect ( Object* receiver, Slot&& slot ) { connect ( receiver->template non_std_slot<Args...> ( std::forward<Slot> ( slot ) ) ); }
    template< typename Object, typename Slot >
    void disconnect ( Object* receiver, Slot&& slot ) { disconnect ( receiver->template non_std_slot<Args...> ( std::forward<Slot> ( slot ) ) ); }
    void connect ( slot<Args...>& slot ) { m_slots.push_back ( &slot ); slot.m_signals.push_front ( this ); }
    void disconnect ( slot<Args...>& slot ) { m_slots.remove ( &slot ); slot.m_signals.remove ( this ); }
};

template< typename... Args >
signal<Args...>::signal ( void* data )
    : slot<Args...> {
        [data,this] ( Args&&... args ) {
            for ( slot<Args...>* slot: m_slots ) {
                slot->m_mutex.lock();
                auto tmp = slot->m_data;
                slot->m_data = data;
                (*slot) ( std::forward<Args> ( args )... );
                slot->m_data = tmp;
                slot->m_mutex.unlock();
            }
        }
    } {}

template< typename... Args >
slot<Args...>::~slot()
{
    for ( signal<Args...>* signal: m_signals )
        signal->m_slots.remove ( this );
}

template< typename... Args >
signal<Args...>::~signal()
{
    for ( slot<Args...>* slot: m_slots )
        slot->m_signals.remove ( this );
}
}

#endif // NON_STD_SIGNAL
