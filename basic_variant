/*
 * Stack-based union container
 * Copyright (C) 2014-2021  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_BASIC_VARIANT
#define NON_STD_BASIC_VARIANT

#include <sstream>

namespace non_std
{
template< typename... Types >
class basic_variant;
}
template< typename Type, typename... OtherTypes >
inline bool operator== ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );
template< typename Type, typename... OtherTypes >
inline bool operator!= ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );
template< typename Type, typename... OtherTypes >
inline bool operator< ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );
template< typename Type, typename... OtherTypes >
inline bool operator> ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );
template< typename Type, typename... OtherTypes >
inline bool operator<= ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );
template< typename Type, typename... OtherTypes >
inline bool operator>= ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );

namespace non_std
{

class bad_get : public std::exception {
public:
    virtual const char* what() const noexcept override {
        return "non_std::bad_get";
    }
};

class bad_comparison : public std::exception {
public:
    virtual const char* what() const noexcept override {
        return "non_std::bad_comparison";
    }
};

template< typename... Types >
class variant_manager;

template< typename FirstType, typename... OtherTypes >
class variant_manager<FirstType,OtherTypes...> : public variant_manager<OtherTypes...> {
    using next = variant_manager<OtherTypes...>;

    static decltype(next::nulltype()) current_type() { return sizeof...(OtherTypes); }

public:
    using next::create;

    static void create ( FirstType& value, decltype(next::nulltype())& type, void* data ) {
        ::new(data) FirstType ( value );
        type = current_type();
    }

    static void create ( const FirstType& value, decltype(next::nulltype())& type, void* data ) {
        ::new(data) FirstType ( value );
        type = current_type();
    }

    static void create ( FirstType&& value, decltype(next::nulltype())& type, void* data ) {
        ::new(data) FirstType ( std::move ( value ) );
        type = current_type();
    }

    static void create ( const FirstType&& value, decltype(next::nulltype())& type, void* data ) {
        ::new(data) FirstType ( std::move ( value ) );
        type = current_type();
    }

    template< class Visitor >
    static auto apply_visitor ( Visitor& visitor, decltype(next::nulltype()) type, void* data )
    -> decltype(visitor(static_cast<FirstType*>(data))) {
        if ( type == current_type() )
            return visitor ( static_cast<FirstType*> ( data ) );
        else
            return next::apply_visitor ( visitor, type, data );
    }

    template< class Visitor >
    static auto apply_visitor ( Visitor& visitor, decltype(next::nulltype()) type, const void* data )
    -> decltype(visitor(static_cast<const FirstType*>(data))) {
        if ( type == current_type() )
            return visitor ( static_cast<const FirstType*> ( data ) );
        else
            return next::apply_visitor ( visitor, type, data );
    }
};

template<>
class variant_manager<> {
    static int current_type() { return -1; }

public:
    static decltype(current_type()) nulltype() { return current_type(); }

    static void create ( std::nullptr_t, decltype(nulltype())& type, void* data ) {
        (void)type; (void)data; /* leave uninitialized */
    }

    template< class Visitor >
    static auto apply_visitor ( Visitor& visitor, decltype(nulltype()) type, const void* data )
    -> decltype(visitor(nullptr)) {
        (void)data;
        if ( type == current_type() )
            return visitor ( nullptr );
        else
            throw std::logic_error ( "basic_variant::apply_visitor invalid data type" );
    }
};

template< typename... Types >
class basic_variant {
    using manager = variant_manager<Types...>;

    typename std::aligned_union<0, Types...>::type data;
    decltype(manager::nulltype()) type{manager::nulltype()};

    struct helpers {
        template< typename From, typename To, typename = decltype(static_cast<To>(std::declval<From>())) >
        static std::true_type test_is_static_castable(int);
        template< typename, typename >
        static std::false_type test_is_static_castable(...);
        template< typename From, typename To >
        using is_static_castable = decltype(test_is_static_castable<From,To>(0));

        template< typename From, typename To, typename = typename std::enable_if<!std::is_reference<To>{}>::type,
                  typename = decltype(std::declval<std::stringstream>() >> std::declval<std::remove_reference<To>::type>()),
                  typename = decltype(std::declval<std::stringstream>() << std::declval<From>()) >
        static std::true_type test_is_lexical_castable(int);
        template< typename, typename >
        static std::false_type test_is_lexical_castable(...);
        template< typename From, typename To >
        using is_lexical_castable = decltype(test_is_lexical_castable<From,To>(0));

        template< typename From, typename To,
                  bool = is_static_castable<From,To>{},
                  bool = is_lexical_castable<From,To>{} >
        struct internal_cast {
            To operator()(From&&) { throw bad_get(); }
        };
        template< typename From, typename To, bool b >
        struct internal_cast<From,To,true,b> {
            To operator()(From&& x) { return static_cast<To>(x); }
        };
        template< typename From, typename To >
        struct internal_cast<From,To,false,true> {
            To operator()(From&& x) {
                std::stringstream stream;
                To y;
                if ( !( stream << x ) || !( stream >> y ) || stream.rdbuf()->in_avail() )
                    throw bad_get();
                return y;
            }
        };

#define COMPARISON(NAME,OP) \
        template< typename Type1, typename Type2, \
                  typename = decltype(const_cast<bool>(std::declval<Type1>() OP std::declval<Type2>())) > \
        static std::true_type test_are_##NAME##_comparable(int); \
        template< typename, typename > \
        static std::false_type test_are_##NAME##_comparable(...); \
        template< typename Type1, typename Type2 > \
        using are_##NAME##_comparable = decltype(test_are_##NAME##_comparable<Type1,Type2>(0)); \
\
        template< typename Type1, typename Type2, \
                  bool = are_##NAME##_comparable<Type1,Type2>{} > \
        struct NAME##_compare { \
            bool operator()(const Type1&, const Type2&) { throw bad_comparison(); } \
        }; \
        template< typename Type1, typename Type2 > \
        struct NAME##_compare<Type1,Type2,true> { \
            bool operator()(const Type1& x, const Type2& y) { return x OP y; } \
        };

        COMPARISON(eq,==)
        COMPARISON(ne,!=)
        COMPARISON(lt,<)
        COMPARISON(gt,>)
        COMPARISON(le,<=)
        COMPARISON(ge,>=)
#undef COMPARISON
    };

    struct visitors {
        template< typename Type >
        struct is_type {
            template< typename Arg >
            bool operator() ( Arg* ) { return false; }
            bool operator() ( Type* ) { return true; }
            bool operator() ( std::nullptr_t ) { return false; }
        };

        template< typename Type >
        struct get {
            template< typename Arg >
            Type operator() ( Arg* data ) {
                return typename helpers::template internal_cast<Arg&,Type> ()( *data );
            }
            Type operator() ( Type* data ) { return *data; }
            Type operator() ( std::nullptr_t ) { throw bad_get(); }
        };

        template< typename Type >
        struct get<Type&> {
            Type& operator() ( Type* data ) { return *data; }
            Type& operator() ( std::nullptr_t ) { throw bad_get(); }
            Type& operator() ( ... ) { throw bad_get(); }
        };

        template<typename Type>
        struct get<Type&&> {
            template< typename Arg >
            Type operator() ( Arg* data ) {
                return typename helpers::template internal_cast<Arg,Type> ()(std::move ( *data ));
            }
            Type operator() ( Type* data ) { return std::move ( *data ); }
            Type operator() ( std::nullptr_t ) { throw bad_get(); }
        };

        struct copy {
            basic_variant* target;
            template< typename Type >
            void operator() ( Type* data ) { target->set ( *data ); }
            void operator() ( std::nullptr_t ) { target->reset(); }
        };

        struct move {
            basic_variant* target;
            template< typename Type >
            void operator() ( Type* data ) { target->set ( std::move ( *data ) ); }
            void operator() ( std::nullptr_t ) { target->reset(); }
        };

        struct init_copy {
            basic_variant* target;
            template< typename Type >
            void operator() ( Type* data ) { target->initialize ( *data ); }
            void operator() ( std::nullptr_t ) {}
        };

        struct init_move {
            basic_variant* target;
            template< typename Type >
            void operator() ( Type* data ) { target->initialize ( std::move ( *data ) ); }
            void operator() ( std::nullptr_t ) {}
        };

        struct destroy {
            template< typename Type >
            void operator() ( Type* data ) { data->~Type(); }
            void operator() ( std::nullptr_t ) {}
        };

#define COMPARISON(NAME) \
        template<typename Type> \
        struct NAME { \
            const Type* other; \
            bool value; \
            template< typename Arg > \
            void operator() ( Arg* data ) { value = typename helpers::template NAME##_compare<Arg, Type>()(*data, *other); } \
            void operator() ( std::nullptr_t ) {} \
        }; \
\
        template<typename Type> \
        struct NAME##2 { \
            const Type* other; \
            bool value; \
            template< typename Arg > \
            void operator() ( Arg* data ) { value = typename helpers::template NAME##_compare<Type, Arg>()(*other, *data); } \
            void operator() ( std::nullptr_t ) {} \
        };

        COMPARISON(eq)
        COMPARISON(ne)
        COMPARISON(lt)
        COMPARISON(gt)
        COMPARISON(le)
        COMPARISON(ge)
#undef COMPARISON
    };

    template< typename Type, typename... OtherTypes >
    friend inline bool ::operator== ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );

    template< typename Type, typename... OtherTypes >
    friend inline bool ::operator!= ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );

    template< typename Type, typename... OtherTypes >
    friend inline bool ::operator< ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );

    template< typename Type, typename... OtherTypes >
    friend inline bool ::operator> ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );

    template< typename Type, typename... OtherTypes >
    friend inline bool ::operator<= ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );

    template< typename Type, typename... OtherTypes >
    friend inline bool ::operator>= ( const Type& x, const non_std::basic_variant<OtherTypes...>& y );

public:
    basic_variant ( ) = default;

    template< typename... OtherTypes >
    basic_variant ( basic_variant<OtherTypes...>& other ) {
        typename visitors::init_copy visitor{this};
        other.apply_visitor ( visitor );
    }

    template< typename... OtherTypes >
    basic_variant ( const basic_variant<OtherTypes...>& other ) {
        typename visitors::init_copy visitor{this};
        other.apply_visitor ( visitor );
    }

    template< typename... OtherTypes >
    basic_variant ( basic_variant<OtherTypes...>&& other ) {
        typename visitors::init_move visitor{this};
        other.apply_visitor ( visitor );
    }

    template< typename... OtherTypes >
    basic_variant ( const basic_variant<OtherTypes...>&& other ) {
        typename visitors::init_move visitor{this};
        other.apply_visitor ( visitor );
    }

    template< typename Type >
    basic_variant ( Type&& value ) {
        initialize ( std::forward<Type> ( value ) );
    }

    ~basic_variant ( ) { reset(); }

    template< typename... OtherTypes >
    basic_variant& operator= ( basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::copy visitor{this};
            other.apply_visitor ( visitor );
        }
        return *this;
    }

    template< typename... OtherTypes >
    basic_variant& operator= ( const basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::copy visitor{this};
            other.apply_visitor ( visitor );
        }
        return *this;
    }

    template< typename... OtherTypes >
    basic_variant& operator= ( basic_variant<OtherTypes...>&& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::move visitor{this};
            other.apply_visitor ( visitor );
        }
        return *this;
    }

    template< typename... OtherTypes >
    basic_variant& operator= ( const basic_variant<OtherTypes...>&& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::move visitor{this};
            other.apply_visitor ( visitor );
        }
        return *this;
    }

    template< typename Type >
    basic_variant& operator= ( Type&& value ) {
        set ( std::forward<Type> ( value ) );
        return *this;
    }

    template< typename... OtherTypes >
    bool operator== ( const basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::template eq<basic_variant<OtherTypes...>> visitor{&other,0};
            apply_visitor ( visitor );
            return visitor.value;
        }
        return true;
    }

    template< typename Type >
    bool operator== ( const Type& other ) {
        typename visitors::template eq<Type> visitor{&other,0};
        apply_visitor ( visitor );
        return visitor.value;
    }

    template< typename... OtherTypes >
    bool operator!= ( const basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::template ne<basic_variant<OtherTypes...>> visitor{&other,0};
            apply_visitor ( visitor );
            return visitor.value;
        }
        return true;
    }

    template< typename Type >
    bool operator!= ( const Type& other ) {
        typename visitors::template ne<Type> visitor{&other,0};
        apply_visitor ( visitor );
        return visitor.value;
    }

    template< typename... OtherTypes >
    bool operator< ( const basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::template lt<basic_variant<OtherTypes...>> visitor{&other,0};
            apply_visitor ( visitor );
            return visitor.value;
        }
        return true;
    }

    template< typename Type >
    bool operator< ( const Type& other ) {
        typename visitors::template lt<Type> visitor{&other,0};
        apply_visitor ( visitor );
        return visitor.value;
    }

    template< typename... OtherTypes >
    bool operator> ( const basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::template gt<basic_variant<OtherTypes...>> visitor{&other,0};
            apply_visitor ( visitor );
            return visitor.value;
        }
        return true;
    }

    template< typename Type >
    bool operator> ( const Type& other ) {
        typename visitors::template gt<Type> visitor{&other,0};
        apply_visitor ( visitor );
        return visitor.value;
    }

    template< typename... OtherTypes >
    bool operator<= ( const basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::template le<basic_variant<OtherTypes...>> visitor{&other,0};
            apply_visitor ( visitor );
            return visitor.value;
        }
        return true;
    }

    template< typename Type >
    bool operator<= ( const Type& other ) {
        typename visitors::template le<Type> visitor{&other,0};
        apply_visitor ( visitor );
        return visitor.value;
    }

    template< typename... OtherTypes >
    bool operator>= ( const basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::template ge<basic_variant<OtherTypes...>> visitor{&other,0};
            apply_visitor ( visitor );
            return visitor.value;
        }
        return true;
    }

    template< typename Type >
    bool operator>= ( const Type& other ) {
        typename visitors::template ge<Type> visitor{&other,0};
        apply_visitor ( visitor );
        return visitor.value;
    }

    bool operator! () const { return is<void>(); }
    explicit operator bool () const { return !is<void>(); }

    template< typename Visitor >
    auto apply_visitor ( Visitor&& visitor )
    -> decltype(manager::apply_visitor(visitor, type, std::addressof(data))) {
        return manager::apply_visitor ( visitor, type, std::addressof ( data ) );
    }

    template< typename Visitor >
    auto apply_visitor ( Visitor&& visitor ) const
    -> decltype(manager::apply_visitor(visitor, type, std::addressof(data))) {
        return manager::apply_visitor ( visitor, type, std::addressof ( data ) );
    }

    void reset () {
        typename visitors::destroy visitor;
        apply_visitor ( visitor );
        type = manager::nulltype();
    }

    template< typename Type >
    auto as ()
    -> decltype(apply_visitor(std::declval<typename visitors::template get<Type>>())) {
        typename visitors::template get<Type> visitor;
        return apply_visitor ( visitor );
    }

    template< typename Type >
    auto as () const
    -> decltype(apply_visitor(std::declval<typename visitors::template get<Type>>())) {
        typename visitors::template get<Type> visitor;
        return apply_visitor ( visitor );
    }

    template< typename Type >
    bool is () const {
        if (std::is_same<Type, void>{} || std::is_same<Type, std::nullptr_t>{})
            return type == manager::nulltype();
        typename visitors::template is_type<Type> visitor;
        return apply_visitor ( visitor );
    }

private:
    template< typename Type >
    void initialize ( Type&& value ) {
        manager::create ( std::forward<Type> ( value ), type, std::addressof ( data ) );
    }

    template< typename Type >
    void set ( Type&& value ) {
        reset();
        initialize(std::forward<Type>(value));
    }

};
}

template< typename Type, typename... OtherTypes >
inline bool operator== ( const Type& x, const non_std::basic_variant<OtherTypes...>& y ) {
    typename non_std::basic_variant<OtherTypes...>::visitors::template eq2<Type> visitor{&x,0};
    y.apply_visitor ( visitor );
    return visitor.value;
}

template< typename Type, typename... OtherTypes >
inline bool operator!= ( const Type& x, const non_std::basic_variant<OtherTypes...>& y ) {
    typename non_std::basic_variant<OtherTypes...>::visitors::template ne2<Type> visitor{&x,0};
    y.apply_visitor ( visitor );
    return visitor.value;
}

template< typename Type, typename... OtherTypes >
inline bool operator< ( const Type& x, const non_std::basic_variant<OtherTypes...>& y ) {
    typename non_std::basic_variant<OtherTypes...>::visitors::template lt2<Type> visitor{&x,0};
    y.apply_visitor ( visitor );
    return visitor.value;
}

template< typename Type, typename... OtherTypes >
inline bool operator> ( const Type& x, const non_std::basic_variant<OtherTypes...>& y ) {
    typename non_std::basic_variant<OtherTypes...>::visitors::template gt2<Type> visitor{&x,0};
    y.apply_visitor ( visitor );
    return visitor.value;
}

template< typename Type, typename... OtherTypes >
inline bool operator<= ( const Type& x, const non_std::basic_variant<OtherTypes...>& y ) {
    typename non_std::basic_variant<OtherTypes...>::visitors::template le2<Type> visitor{&x,0};
    y.apply_visitor ( visitor );
    return visitor.value;
}

template< typename Type, typename... OtherTypes >
inline bool operator>= ( const Type& x, const non_std::basic_variant<OtherTypes...>& y ) {
    typename non_std::basic_variant<OtherTypes...>::visitors::template ge2<Type> visitor{&x,0};
    y.apply_visitor ( visitor );
    return visitor.value;
}

#endif // NON_STD_BASIC_VARIANT
