/*
 * Stack-based union container
 * Copyright (C) 2014-2018  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_BASIC_VARIANT
#define NON_STD_BASIC_VARIANT

#include <stdexcept>
#include "runtime_cast"

namespace non_std
{

class bad_get : public std::exception {
public:
    virtual const char* what() const noexcept override {
        return "non_std::bad_get";
    }
};

template< typename... _Types >
class variant_manager;

template< typename _FirstType, typename... _OtherTypes >
class variant_manager<_FirstType,_OtherTypes...> : public variant_manager<_OtherTypes...> {
    using next = variant_manager<_OtherTypes...>;

    static decltype(next::nulltype()) current_type() { return sizeof...(_OtherTypes); }

public:
    using next::create;

    static void create ( _FirstType value, decltype(next::nulltype())& type, void* data ) {
        ::new(data) _FirstType ( std::move ( value ) );
        type = current_type();
    }

    template< class Visitor >
    static void apply_visitor ( Visitor& visitor, decltype(next::nulltype()) type, void* data ) {
        if ( type == current_type() )
            visitor ( static_cast<_FirstType*> ( data ) );
        else
            next::apply_visitor ( visitor, type, data );
    }
};

template<>
class variant_manager<> {
    static int current_type() { return -1; }

public:
    static decltype(current_type()) nulltype() { return current_type(); }

    static void create ( std::nullptr_t, decltype(nulltype())& type, void* data ) {
        (void)type; (void)data; /* leave null */
    }

    template< class Visitor >
    static void apply_visitor ( Visitor& visitor, decltype(nulltype()) type, void* data ) {
        (void)data;
        if ( type == current_type() )
            visitor ( nullptr );
        else
            throw std::logic_error ( "basic_variant::apply_visitor invalid data type" );
    }
};

template< typename... _Types >
class basic_variant {
    using manager = variant_manager<_Types...>;

    typename std::aligned_union<0, _Types...>::type data;
    decltype(manager::nulltype()) type{manager::nulltype()};

    struct visitors {
        template< typename _Type >
        struct get {
            typename std::aligned_storage<sizeof(_Type),alignof(_Type)>::type actual_value{};
            _Type& value = reinterpret_cast<_Type&>(actual_value);
            ~get ( ) { value.~_Type(); }
            template< typename _Arg >
            void operator() ( _Arg* __arg ) { ::new(&value) _Type(runtime_cast<_Type> ( *__arg )); }
            void operator() ( _Type* data ) { ::new(&value) _Type(*data); }
            void operator() ( std::nullptr_t ) { throw bad_get(); }
        };

        template<typename _Type>
        struct get<_Type&&> {
            typename std::aligned_storage<sizeof(_Type),alignof(_Type)>::type actual_value{};
            _Type& value = reinterpret_cast<_Type&>(actual_value);
            ~get ( ) { value.~_Type(); }
            template< typename _Arg >
            void operator() ( _Arg* __arg ) { ::new(&value) _Type(runtime_cast<_Type> (std::move ( *__arg ))); }
            void operator() ( _Type* data ) { ::new(&value) _Type(std::move ( *data )); }
            void operator() ( std::nullptr_t ) { throw bad_get(); }
        };

        struct copy {
            basic_variant* target;
            template< typename _Type >
            void operator() ( _Type* data ) { target->set ( *data ); }
            void operator() ( std::nullptr_t ) { target->reset(); }
        };

        struct move {
            basic_variant* target;
            template< typename _Type >
            void operator() ( _Type* data ) { target->set ( std::move ( *data ) ); }
            void operator() ( std::nullptr_t ) { target->reset(); }
        };

        struct destroy {
            template< typename _Type >
            void operator() ( _Type* data ) { data->~_Type(); }
            void operator() ( std::nullptr_t ) {}
        };
    };

public:
    basic_variant ( ) = default;

    basic_variant ( const basic_variant& other ) {
        typename visitors::copy visitor{this};
        other.apply_visitor ( visitor );
    }

    basic_variant ( basic_variant&& other ) {
        typename visitors::move visitor{this};
        other.apply_visitor ( visitor );
    }

    template< typename _Type >
    basic_variant ( _Type value ) {
        set ( std::move ( value ) );
    }

    ~basic_variant ( ) { reset(); }

    basic_variant& operator= ( const basic_variant& other ) {
        typename visitors::copy visitor{this};
        other.apply_visitor ( visitor );
        return *this;
    }

    basic_variant& operator= ( basic_variant&& other ) {
        typename visitors::move visitor{this};
        other.apply_visitor ( visitor );
        return *this;
    }

    template< typename _Type >
    basic_variant& operator= ( _Type value ) {
        set ( std::move ( value ) );
        return *this;
    }

    bool is_null () const { return type == manager::nulltype(); }

    template< typename _Visitor >
    void apply_visitor ( _Visitor& visitor ) {
        manager::apply_visitor ( visitor, type, std::addressof ( data ) );
    }

    template< typename _Visitor >
    void apply_visitor ( _Visitor& visitor ) const {
        manager::apply_visitor ( visitor, type, std::addressof ( data ) );
    }

    void reset () {
        typename visitors::destroy visitor;
        apply_visitor ( visitor );
        type = manager::nulltype();
    }

    template< typename _Type >
    typename std::remove_reference<_Type>::type as () const {
        typename visitors::template get<_Type> visitor;
        apply_visitor ( visitor );
        return std::move ( visitor.value );
    }

private:
    template< typename _Type >
    void set ( _Type value ) {
        reset();
        manager::create ( std::move ( value ), type, std::addressof ( data ) );
    }

};
}

template< typename _Res, typename _Manager >
inline _Res runtime_cast ( non_std::basic_variant<_Manager> s ) { return s.template as<_Res> (); }

#endif // NON_STD_BASIC_VARIANT
