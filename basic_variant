/*
 * Stack-based union container
 * Copyright (C) 2014-2019  Matija Skala <mskala@gmx.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_BASIC_VARIANT
#define NON_STD_BASIC_VARIANT

#include <sstream>

namespace non_std
{

class bad_get : public std::exception {
public:
    virtual const char* what() const noexcept override {
        return "non_std::bad_get";
    }
};

template< typename... Types >
class variant_manager;

template< typename FirstType, typename... OtherTypes >
class variant_manager<FirstType,OtherTypes...> : public variant_manager<OtherTypes...> {
    using next = variant_manager<OtherTypes...>;

    static decltype(next::nulltype()) current_type() { return sizeof...(OtherTypes); }

public:
    using next::create;

    static void create ( FirstType& value, decltype(next::nulltype())& type, void* data ) {
        ::new(data) FirstType ( value );
        type = current_type();
    }

    static void create ( const FirstType& value, decltype(next::nulltype())& type, void* data ) {
        ::new(data) FirstType ( value );
        type = current_type();
    }

    static void create ( FirstType&& value, decltype(next::nulltype())& type, void* data ) {
        ::new(data) FirstType ( std::move ( value ) );
        type = current_type();
    }

    static void create ( const FirstType&& value, decltype(next::nulltype())& type, void* data ) {
        ::new(data) FirstType ( std::move ( value ) );
        type = current_type();
    }

    template< class Visitor >
    static void apply_visitor ( Visitor& visitor, decltype(next::nulltype()) type, void* data ) {
        if ( type == current_type() )
            visitor ( static_cast<FirstType*> ( data ) );
        else
            next::apply_visitor ( visitor, type, data );
    }

    template< class Visitor >
    static void apply_visitor ( Visitor& visitor, decltype(next::nulltype()) type, const void* data ) {
        if ( type == current_type() )
            visitor ( static_cast<const FirstType*> ( data ) );
        else
            next::apply_visitor ( visitor, type, data );
    }
};

template<>
class variant_manager<> {
    static int current_type() { return -1; }

public:
    static decltype(current_type()) nulltype() { return current_type(); }

    static void create ( std::nullptr_t, decltype(nulltype())& type, void* data ) {
        (void)type; (void)data; /* leave uninitialized */
    }

    template< class Visitor >
    static void apply_visitor ( Visitor& visitor, decltype(nulltype()) type, const void* data ) {
        (void)data;
        if ( type == current_type() )
            visitor ( nullptr );
        else
            throw std::logic_error ( "basic_variant::apply_visitor invalid data type" );
    }
};

template< typename... Types >
class basic_variant {
    using manager = variant_manager<Types...>;

    typename std::aligned_union<0, Types...>::type data;
    decltype(manager::nulltype()) type{manager::nulltype()};

    struct helpers {
        template< typename From, typename To >
        struct lexical_cast {
            To operator()(From x) {
                std::stringstream stream;
                typename std::remove_reference<To>::type y;
                if ( !( stream << x ) || !( stream >> y ) || stream.rdbuf()->in_avail() )
                    throw bad_get();
                return std::move(y);
            }
        };

        template< typename From, typename To,
                  typename = decltype(static_cast<To>(std::declval<From>())) >
        static std::true_type test_is_static_castable(int);
        template< typename, typename >
        static std::false_type test_is_static_castable(...);
        template< typename From, typename To >
        using is_static_castable = decltype(test_is_static_castable<From,To>(0));

        template< typename From, typename To,
                  typename = decltype(lexical_cast<From,To>()(std::declval<From>())) >
        static std::true_type test_is_lexical_castable(int);
        template< typename, typename >
        static std::false_type test_is_lexical_castable(...);
        template< typename From, typename To >
        using is_lexical_castable = decltype(test_is_lexical_castable<From,To>(0));

        template< typename From, typename To,
                  bool = is_static_castable<From,To>{},
                  bool = is_lexical_castable<From,To>{} >
        struct internal_cast {
            To operator()(From) { throw bad_get(); }
        };
        template< typename From, typename To, bool b >
        struct internal_cast<From,To,true,b> {
            To operator()(From x) { return static_cast<To>(x); }
        };
        template< typename From, typename To >
        struct internal_cast<From,To,false,true> {
            To operator()(From x) { return lexical_cast<From,To>()(x); }
        };
    };

    template< typename From, typename To >
    using internal_cast = typename helpers::template internal_cast<From,To>;

    struct visitors {
        template< typename Type >
        struct get {
            typename std::aligned_storage<sizeof(Type),alignof(Type)>::type actual_value{};
            Type& value = reinterpret_cast<Type&>(actual_value);
            ~get ( ) { value.~Type(); }
            template< typename Arg >
            void operator() ( Arg* data ) {
                ::new(&value) Type(internal_cast<Arg&,Type> ()( *data ));
            }
            void operator() ( Type* data ) { ::new(&value) Type(*data); }
            void operator() ( std::nullptr_t ) { throw bad_get(); }
        };

        template<typename Type>
        struct get<Type&&> {
            typename std::aligned_storage<sizeof(Type),alignof(Type)>::type actual_value{};
            Type& value = reinterpret_cast<Type&>(actual_value);
            ~get ( ) { value.~Type(); }
            template< typename Arg >
            void operator() ( Arg* data ) {
                ::new(&value) Type(internal_cast<Arg&&,Type> ()(std::move ( *data )));
            }
            void operator() ( Type* data ) { ::new(&value) Type(std::move ( *data )); }
            void operator() ( std::nullptr_t ) { throw bad_get(); }
        };

        struct copy {
            basic_variant* target;
            template< typename Type >
            void operator() ( Type* data ) { target->set ( *data ); }
            void operator() ( std::nullptr_t ) { target->reset(); }
        };

        struct move {
            basic_variant* target;
            template< typename Type >
            void operator() ( Type* data ) { target->set ( std::move ( *data ) ); }
            void operator() ( std::nullptr_t ) { target->reset(); }
        };

        struct init_copy {
            basic_variant* target;
            template< typename Type >
            void operator() ( Type* data ) { target->initialize ( *data ); }
            void operator() ( std::nullptr_t ) {}
        };

        struct init_move {
            basic_variant* target;
            template< typename Type >
            void operator() ( Type* data ) { target->initialize ( std::move ( *data ) ); }
            void operator() ( std::nullptr_t ) {}
        };

        struct destroy {
            template< typename Type >
            void operator() ( Type* data ) { data->~Type(); }
            void operator() ( std::nullptr_t ) {}
        };
    };

public:
    basic_variant ( ) = default;

    template< typename... OtherTypes >
    basic_variant ( basic_variant<OtherTypes...>& other ) {
        typename visitors::init_copy visitor{this};
        other.apply_visitor ( visitor );
    }

    template< typename... OtherTypes >
    basic_variant ( const basic_variant<OtherTypes...>& other ) {
        typename visitors::init_copy visitor{this};
        other.apply_visitor ( visitor );
    }

    template< typename... OtherTypes >
    basic_variant ( basic_variant<OtherTypes...>&& other ) {
        typename visitors::init_move visitor{this};
        other.apply_visitor ( visitor );
    }

    template< typename... OtherTypes >
    basic_variant ( const basic_variant<OtherTypes...>&& other ) {
        typename visitors::init_move visitor{this};
        other.apply_visitor ( visitor );
    }

    template< typename Type >
    basic_variant ( Type&& value ) {
        initialize ( std::forward<Type> ( value ) );
    }

    ~basic_variant ( ) { reset(); }

    template< typename... OtherTypes >
    basic_variant& operator= ( basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::copy visitor{this};
            other.apply_visitor ( visitor );
        }
        return *this;
    }

    template< typename... OtherTypes >
    basic_variant& operator= ( const basic_variant<OtherTypes...>& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::copy visitor{this};
            other.apply_visitor ( visitor );
        }
        return *this;
    }

    template< typename... OtherTypes >
    basic_variant& operator= ( basic_variant<OtherTypes...>&& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::move visitor{this};
            other.apply_visitor ( visitor );
        }
        return *this;
    }

    template< typename... OtherTypes >
    basic_variant& operator= ( const basic_variant<OtherTypes...>&& other ) {
        if (&other != static_cast<void*>(this)) {
            typename visitors::move visitor{this};
            other.apply_visitor ( visitor );
        }
        return *this;
    }

    template< typename Type >
    basic_variant& operator= ( Type&& value ) {
        set ( std::forward<Type> ( value ) );
        return *this;
    }

    bool is_null () const { return type == manager::nulltype(); }

    template< typename Visitor >
    void apply_visitor ( Visitor& visitor ) {
        manager::apply_visitor ( visitor, type, std::addressof ( data ) );
    }

    template< typename Visitor >
    void apply_visitor ( Visitor& visitor ) const {
        manager::apply_visitor ( visitor, type, std::addressof ( data ) );
    }

    void reset () {
        typename visitors::destroy visitor;
        apply_visitor ( visitor );
        type = manager::nulltype();
    }

    template< typename Type >
    typename std::remove_reference<Type>::type as () {
        typename visitors::template get<Type> visitor;
        apply_visitor ( visitor );
        return std::move ( visitor.value );
    }

    template< typename Type >
    typename std::remove_reference<Type>::type as () const {
        typename visitors::template get<Type> visitor;
        apply_visitor ( visitor );
        return std::move ( visitor.value );
    }

private:
    template< typename Type >
    void initialize ( Type&& value ) {
        manager::create ( std::forward<Type> ( value ), type, std::addressof ( data ) );
    }

    template< typename Type >
    void set ( Type&& value ) {
        reset();
        initialize(std::forward<Type>(value));
    }

};
}

#endif // NON_STD_BASIC_VARIANT
